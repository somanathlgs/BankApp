package com.example.demo.controller;

import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Account;
import com.example.demo.service.AccountNumberGeneratorService;
import com.example.demo.service.AccountService;

@RestController
public class AccountController {

	@Autowired
	private AccountService accountService;
	
	@Autowired
    private AccountNumberGeneratorService accountNumberGeneratorService;

	
	@PostMapping("/createaccount")
	public Account creteaccount(@RequestBody Account account) {
		
		 String randomAccountNumber = accountNumberGeneratorService.generateRandomAccountNumber();
	        
	        Account newAccount = new Account();
	        newAccount.setAcc_number(randomAccountNumber);
	        
	        Account createdAccount = accountService.createaccount(newAccount);
	        
	        return createdAccount;
		
		}
		//Account account1 = accountService.createaccount(account);
		//return account1;
		
		
	/*	@RestController
		@RequestMapping("/api/accounts")
		public class AccountController {
		    @Autowired
		    private AccountService accountService;

		    @PostMapping("/create")
		    public ResponseEntity<Account> createAccount(
		            @RequestParam String accountNumber,
		            @RequestParam String ownerName,
		            @RequestParam double initialBalance) {
		        Account newAccount = accountService.createAccount(accountNumber, ownerName, initialBalance);
		        return new ResponseEntity<>(newAccount, HttpStatus.CREATED);
		    }
		}

	}*/
		
	
	
	@GetMapping("/getallaccount")
	public List<Account>getallAccount(){
		
		List<Account> getallaccount = accountService.getallaccount();
		return getallaccount;
		
	}
	
	@GetMapping("/gets/{acc_id}")
	public Account getaccountbyid(@PathVariable Long acc_id) {
		Account getaccount = accountService.getaccount(acc_id);
		if (getaccount != null) {
            System.out.println("ok");
        } else {
            System.out.println("Account not found");
        }
		return getaccount;
		
	}
	
	@PutMapping("/update/{acc_id}")
	public Account updateaccount(@RequestBody int acc_id) {
		Account updateaccount = accountService.updateaccount(acc_id);
		return updateaccount;
		
	}
	
	
	@GetMapping("/getamount/{acc_id}")
	public Account withdraw( @PathVariable int acc_id,double acc_no,int amount) {
		Account withdrawamount = accountService.withdrawamount(acc_id,acc_no,amount);
		return withdrawamount;
		
	}
	@PostMapping("/depositeamount")
	public Account deposite(@PathVariable Account account) {
		accountService.depositeamount(account);
		return account;
		
	}
	
/*	@PostMapping("/random")
    public ResponseEntity<Account> createRandomAccount() {
        String randomAccountNumber = accountNumberGeneratorService.generateRandomAccountNumber();
        
        Account newAccount = new Account();
        newAccount.setAcc_number(randomAccountNumber);
        
        Account createdAccount = accountService.createaccount(newAccount);
        
        return new ResponseEntity<>(createdAccount, HttpStatus.CREATED);
	
	}*/
	
	@PostMapping("/{accountId}/credit")
	 public ResponseEntity<Account> creditAmount(
	            @PathVariable Long acc_id,
	            @RequestParam double amount) {
	        boolean credited = accountService.creditAmount(acc_id, amount);
	        if (credited) {
	            Account updatedAccount = accountService.getaccount(acc_id);
	            return new ResponseEntity<>(updatedAccount, HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }

	    // Endpoint to debit an amount from an account
	    @PostMapping("/{accountId}/debit")
	    public ResponseEntity<Account> debitAmount(
	            @PathVariable Long acc_id,
	            @RequestParam double amount) {
	        boolean debited = accountService.debitAmount(acc_id, amount);
	        if (debited) {
	            Account updatedAccount = accountService.getaccount(acc_id);
	            return new ResponseEntity<>(updatedAccount, HttpStatus.OK);
	        } else {
	            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	        }
	    }
}
